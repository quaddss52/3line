/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LayoutRouteImport } from './routes/_layout'
import { Route as BaseRouteImport } from './routes/_base'
import { Route as BaseIndexRouteImport } from './routes/_base/index'
import { Route as LayoutSettingsIndexRouteImport } from './routes/_layout/settings/index'
import { Route as LayoutSettingsUsersRouteImport } from './routes/_layout/settings/users'
import { Route as LayoutSettingsTaskRouteImport } from './routes/_layout/settings/task'
import { Route as LayoutSettingsSupportRouteImport } from './routes/_layout/settings/support'
import { Route as LayoutSettingsReportingRouteImport } from './routes/_layout/settings/reporting'
import { Route as LayoutSettingsProjectsRouteImport } from './routes/_layout/settings/projects'
import { Route as LayoutSettingsHomeRouteImport } from './routes/_layout/settings/home'
import { Route as LayoutSettingsDashboardRouteImport } from './routes/_layout/settings/dashboard'

const LayoutRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const BaseRoute = BaseRouteImport.update({
  id: '/_base',
  getParentRoute: () => rootRouteImport,
} as any)
const BaseIndexRoute = BaseIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => BaseRoute,
} as any)
const LayoutSettingsIndexRoute = LayoutSettingsIndexRouteImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutSettingsUsersRoute = LayoutSettingsUsersRouteImport.update({
  id: '/settings/users',
  path: '/settings/users',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutSettingsTaskRoute = LayoutSettingsTaskRouteImport.update({
  id: '/settings/task',
  path: '/settings/task',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutSettingsSupportRoute = LayoutSettingsSupportRouteImport.update({
  id: '/settings/support',
  path: '/settings/support',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutSettingsReportingRoute = LayoutSettingsReportingRouteImport.update({
  id: '/settings/reporting',
  path: '/settings/reporting',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutSettingsProjectsRoute = LayoutSettingsProjectsRouteImport.update({
  id: '/settings/projects',
  path: '/settings/projects',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutSettingsHomeRoute = LayoutSettingsHomeRouteImport.update({
  id: '/settings/home',
  path: '/settings/home',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutSettingsDashboardRoute = LayoutSettingsDashboardRouteImport.update({
  id: '/settings/dashboard',
  path: '/settings/dashboard',
  getParentRoute: () => LayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof BaseIndexRoute
  '/settings/dashboard': typeof LayoutSettingsDashboardRoute
  '/settings/home': typeof LayoutSettingsHomeRoute
  '/settings/projects': typeof LayoutSettingsProjectsRoute
  '/settings/reporting': typeof LayoutSettingsReportingRoute
  '/settings/support': typeof LayoutSettingsSupportRoute
  '/settings/task': typeof LayoutSettingsTaskRoute
  '/settings/users': typeof LayoutSettingsUsersRoute
  '/settings': typeof LayoutSettingsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof BaseIndexRoute
  '/settings/dashboard': typeof LayoutSettingsDashboardRoute
  '/settings/home': typeof LayoutSettingsHomeRoute
  '/settings/projects': typeof LayoutSettingsProjectsRoute
  '/settings/reporting': typeof LayoutSettingsReportingRoute
  '/settings/support': typeof LayoutSettingsSupportRoute
  '/settings/task': typeof LayoutSettingsTaskRoute
  '/settings/users': typeof LayoutSettingsUsersRoute
  '/settings': typeof LayoutSettingsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_base': typeof BaseRouteWithChildren
  '/_layout': typeof LayoutRouteWithChildren
  '/_base/': typeof BaseIndexRoute
  '/_layout/settings/dashboard': typeof LayoutSettingsDashboardRoute
  '/_layout/settings/home': typeof LayoutSettingsHomeRoute
  '/_layout/settings/projects': typeof LayoutSettingsProjectsRoute
  '/_layout/settings/reporting': typeof LayoutSettingsReportingRoute
  '/_layout/settings/support': typeof LayoutSettingsSupportRoute
  '/_layout/settings/task': typeof LayoutSettingsTaskRoute
  '/_layout/settings/users': typeof LayoutSettingsUsersRoute
  '/_layout/settings/': typeof LayoutSettingsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/settings/dashboard'
    | '/settings/home'
    | '/settings/projects'
    | '/settings/reporting'
    | '/settings/support'
    | '/settings/task'
    | '/settings/users'
    | '/settings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/settings/dashboard'
    | '/settings/home'
    | '/settings/projects'
    | '/settings/reporting'
    | '/settings/support'
    | '/settings/task'
    | '/settings/users'
    | '/settings'
  id:
    | '__root__'
    | '/_base'
    | '/_layout'
    | '/_base/'
    | '/_layout/settings/dashboard'
    | '/_layout/settings/home'
    | '/_layout/settings/projects'
    | '/_layout/settings/reporting'
    | '/_layout/settings/support'
    | '/_layout/settings/task'
    | '/_layout/settings/users'
    | '/_layout/settings/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  BaseRoute: typeof BaseRouteWithChildren
  LayoutRoute: typeof LayoutRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_base': {
      id: '/_base'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof BaseRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_base/': {
      id: '/_base/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof BaseIndexRouteImport
      parentRoute: typeof BaseRoute
    }
    '/_layout/settings/': {
      id: '/_layout/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof LayoutSettingsIndexRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/settings/users': {
      id: '/_layout/settings/users'
      path: '/settings/users'
      fullPath: '/settings/users'
      preLoaderRoute: typeof LayoutSettingsUsersRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/settings/task': {
      id: '/_layout/settings/task'
      path: '/settings/task'
      fullPath: '/settings/task'
      preLoaderRoute: typeof LayoutSettingsTaskRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/settings/support': {
      id: '/_layout/settings/support'
      path: '/settings/support'
      fullPath: '/settings/support'
      preLoaderRoute: typeof LayoutSettingsSupportRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/settings/reporting': {
      id: '/_layout/settings/reporting'
      path: '/settings/reporting'
      fullPath: '/settings/reporting'
      preLoaderRoute: typeof LayoutSettingsReportingRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/settings/projects': {
      id: '/_layout/settings/projects'
      path: '/settings/projects'
      fullPath: '/settings/projects'
      preLoaderRoute: typeof LayoutSettingsProjectsRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/settings/home': {
      id: '/_layout/settings/home'
      path: '/settings/home'
      fullPath: '/settings/home'
      preLoaderRoute: typeof LayoutSettingsHomeRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/settings/dashboard': {
      id: '/_layout/settings/dashboard'
      path: '/settings/dashboard'
      fullPath: '/settings/dashboard'
      preLoaderRoute: typeof LayoutSettingsDashboardRouteImport
      parentRoute: typeof LayoutRoute
    }
  }
}

interface BaseRouteChildren {
  BaseIndexRoute: typeof BaseIndexRoute
}

const BaseRouteChildren: BaseRouteChildren = {
  BaseIndexRoute: BaseIndexRoute,
}

const BaseRouteWithChildren = BaseRoute._addFileChildren(BaseRouteChildren)

interface LayoutRouteChildren {
  LayoutSettingsDashboardRoute: typeof LayoutSettingsDashboardRoute
  LayoutSettingsHomeRoute: typeof LayoutSettingsHomeRoute
  LayoutSettingsProjectsRoute: typeof LayoutSettingsProjectsRoute
  LayoutSettingsReportingRoute: typeof LayoutSettingsReportingRoute
  LayoutSettingsSupportRoute: typeof LayoutSettingsSupportRoute
  LayoutSettingsTaskRoute: typeof LayoutSettingsTaskRoute
  LayoutSettingsUsersRoute: typeof LayoutSettingsUsersRoute
  LayoutSettingsIndexRoute: typeof LayoutSettingsIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutSettingsDashboardRoute: LayoutSettingsDashboardRoute,
  LayoutSettingsHomeRoute: LayoutSettingsHomeRoute,
  LayoutSettingsProjectsRoute: LayoutSettingsProjectsRoute,
  LayoutSettingsReportingRoute: LayoutSettingsReportingRoute,
  LayoutSettingsSupportRoute: LayoutSettingsSupportRoute,
  LayoutSettingsTaskRoute: LayoutSettingsTaskRoute,
  LayoutSettingsUsersRoute: LayoutSettingsUsersRoute,
  LayoutSettingsIndexRoute: LayoutSettingsIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  BaseRoute: BaseRouteWithChildren,
  LayoutRoute: LayoutRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
